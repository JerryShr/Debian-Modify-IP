#!/bin/bash
# Debian Network Configuration Script
# Function: Allows switching between fixed IP (static) and floating IP (DHCP)

# Check for root privileges
if [ "$EUID" -ne 0 ]; then
    echo "‚ùå Please run this script with sudo"
    exit 1
fi

# Automatically detect active network interface
detect_interface() {
    # Prioritize interface with default gateway
    DEFAULT_IFACE=$(ip route show default 2>/dev/null | awk '/default/ {print $5}')
    
    # If no default gateway, select the first non-lo interface with IPv4 address
    if [ -z "$DEFAULT_IFACE" ]; then
        DEFAULT_IFACE=$(ip -o -4 addr show 2>/dev/null | awk '!/lo/ && /scope global/ {print $2; exit}')
    fi
    
    [ -n "$DEFAULT_IFACE" ] && echo "$DEFAULT_IFACE" || echo ""
}

# Validate IP/CIDR format
validate_ip_cidr() {
    local ip_cidr=$1
    if [[ $ip_cidr =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}/[0-9]{1,2}$ ]]; then
        IFS='/' read -r ip cidr <<< "$ip_cidr"
        IFS='.' read -r i1 i2 i3 i4 <<< "$ip"
        if [ "$i1" -le 255 ] && [ "$i2" -le 255 ] && [ "$i3" -le 255 ] && [ "$i4" -le 255 ] && [ "$cidr" -le 32 ]; then
            return 0
        fi
    fi
    return 1
}

# Validate IP format
validate_ip() {
    local ip=$1
    if [[ $ip =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
        IFS='.' read -r i1 i2 i3 i4 <<< "$ip"
        if [ "$i1" -le 255 ] && [ "$i2" -le 255 ] && [ "$i3" -le 255 ] && [ "$i4" -le 255 ]; then
            return 0
        fi
    fi
    return 1
}

# Get current IP
get_current_ip() {
    local iface=$1
    ip -4 addr show dev $iface 2>/dev/null | awk '/inet/ && !/secondary/ {print $2}' | head -n1
}

# Get current gateway
get_current_gateway() {
    ip route show default 2>/dev/null | awk '/default/ {print $3}' | head -n1
}

# Get current network mode
get_current_mode() {
    local iface=$1
    if grep -q "iface $iface inet dhcp" /etc/network/interfaces; then
        echo "dhcp"
    elif grep -q "iface $iface inet static" /etc/network/interfaces; then
        echo "static"
    else
        echo "unknown"
    fi
}

# Apply network configuration
apply_network_config() {
    local iface=$1
    local mode=$2
    local ip_cidr=$3
    local gateway=$4
    
    # Backup original configuration file
    BACKUP_FILE="/etc/network/interfaces.$(date +%Y%m%d-%H%M%S).bak"
    cp /etc/network/interfaces "$BACKUP_FILE"
    echo "‚úÖ Configuration file backed up to: $BACKUP_FILE"
    
    # Create temporary configuration file
    TEMP_FILE=$(mktemp)
    cat /etc/network/interfaces > $TEMP_FILE
    
    # Remove all configurations related to the current interface
    sed -i "/auto $iface/,/^\s*$/d" $TEMP_FILE
    
    # Add new configuration
    if [ "$mode" == "static" ]; then
        cat >> $TEMP_FILE <<EOF

# Static IP configuration (generated by script on $(date))
auto $iface
iface $iface inet static
    address $ip_cidr
    gateway $gateway
EOF
    else
        cat >> $TEMP_FILE <<EOF

# DHCP configuration (generated by script on $(date))
auto $iface
iface $iface inet dhcp
EOF
    fi
    
    # Apply new configuration
    mv $TEMP_FILE /etc/network/interfaces
    
    echo "üîÑ Configuration updated:"
    echo "----------------------------------------"
    grep -A 3 "iface $iface" /etc/network/interfaces
    echo "----------------------------------------"
    
    # Apply network configuration
    echo "üîÑ Applying network configuration..."
    echo "Step 1: Clearing existing IP addresses..."
    ip addr flush dev $iface 2>/dev/null
    
    echo "Step 2: Shutting down interface..."
    ifdown $iface --force 2>/dev/null
    
    echo "Step 3: Starting interface..."
    if ! ifup $iface; then
        echo "‚ö†Ô∏è ifup failed, trying alternative methods..."
        
        if [ "$mode" == "static" ]; then
            # Try to manually set static IP
            IP_ADDR=$(echo $ip_cidr | cut -d'/' -f1)
            PREFIX=$(echo $ip_cidr | cut -d'/' -f2)
            
            echo "Manually setting IP: $IP_ADDR/$PREFIX"
            ip addr add $IP_ADDR/$PREFIX dev $iface
            
            echo "Manually setting gateway: $gateway"
            ip route add default via $gateway dev $iface
        else
            # Try to manually get DHCP
            echo "Manually obtaining DHCP address..."
            dhclient -r $iface
            dhclient $iface
        fi
    fi
}

# Main program
INTERFACE=$(detect_interface)

if [ -z "$INTERFACE" ]; then
    echo "‚ùå Error: No active network interface detected"
    exit 1
fi

echo "üîç Detected active interface: $INTERFACE"

# Get current network configuration
CURRENT_IP=$(get_current_ip $INTERFACE)
CURRENT_GW=$(get_current_gateway)
CURRENT_MODE=$(get_current_mode $INTERFACE)

# Display current network configuration
echo ""
echo "üìù Current network configuration:"
echo "----------------------------------------"
if [ -n "$CURRENT_IP" ]; then
    echo "Current IP:      $CURRENT_IP"
else
    echo "Current IP:      Not detected"
fi

if [ -n "$CURRENT_GW" ]; then
    echo "Current Gateway: $CURRENT_GW"
else
    echo "Current Gateway: Not detected"
fi

echo "Current Mode:    ${CURRENT_MODE^^}"
echo "----------------------------------------"

# Choose configuration mode
echo ""
echo "üìå Please select network configuration mode:"
echo "1) Fixed IP (Static)"
echo "2) Floating IP (DHCP)"
echo "----------------------------------------"

while true; do
    read -p "Enter option (1/2): " choice
    case $choice in
        1)
            MODE="static"
            echo "You selected: Fixed IP (Static)"
            break
            ;;
        2)
            MODE="dhcp"
            echo "You selected: Floating IP (DHCP)"
            break
            ;;
        *)
            echo "‚ùå Invalid option, please try again"
            ;;
    esac
done

# If static mode, get IP and gateway
if [ "$MODE" == "static" ]; then
    echo ""
    echo "üìå Please enter static IP configuration"
    echo "----------------------------------------"
    
    while true; do
        read -p "Enter IP address/CIDR (e.g., 192.168.1.100/24): " IP_CIDR
        if validate_ip_cidr "$IP_CIDR"; then
            break
        else
            echo "‚ùå Invalid IP/CIDR format, please try again"
        fi
    done
    
    while true; do
        read -p "Enter gateway address: " GATEWAY
        if validate_ip "$GATEWAY"; then
            break
        else
            echo "‚ùå Invalid gateway address, please try again"
        fi
    done
    
    echo "----------------------------------------"
    echo "‚úÖ Configuration confirmed:"
    echo "Interface: $INTERFACE"
    echo "Mode:      Static"
    echo "IP/CIDR:   $IP_CIDR"
    echo "Gateway:   $GATEWAY"
else
    echo ""
    echo "‚úÖ Configuration confirmed:"
    echo "Interface: $INTERFACE"
    echo "Mode:      DHCP"
fi

echo "----------------------------------------"

read -p "Apply this configuration? (y/N) " -n 1 -r
echo
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo "Operation canceled"
    exit 0
fi

# Apply configuration
if [ "$MODE" == "static" ]; then
    apply_network_config $INTERFACE $MODE $IP_CIDR $GATEWAY
else
    apply_network_config $INTERFACE $MODE
fi

# Get new network configuration
NEW_IP=$(get_current_ip $INTERFACE)
NEW_GW=$(get_current_gateway)
NEW_MODE=$(get_current_mode $INTERFACE)

# Verify configuration
echo ""
echo "üîç Verifying new configuration:"
echo "----------------------------------------"
if [ "$MODE" == "static" ]; then
    echo "Configured IP:      $IP_CIDR"
    echo "Current IP:         ${NEW_IP:-Not detected}"
    echo ""
    echo "Configured Gateway: $GATEWAY"
    echo "Current Gateway:    ${NEW_GW:-Not detected}"
else
    echo "Current IP:         ${NEW_IP:-Not detected}"
    echo "Current Gateway:    ${NEW_GW:-Not detected}"
fi
echo ""
echo "Configured Mode:    ${MODE^^}"
echo "Current Mode:       ${NEW_MODE^^}"
echo ""

# Test network connectivity
TEST_HOST="8.8.8.8"
if [ -n "$NEW_GW" ]; then
    echo "Testing gateway connectivity:"
    if ping -c 2 -W 1 $NEW_GW >/dev/null 2>&1; then
        echo "‚úÖ Gateway $NEW_GW is reachable"
        
        echo "Testing internet connectivity:"
        if ping -c 2 -W 1 $TEST_HOST >/dev/null 2>&1; then
            echo "‚úÖ Internet connection is working ($TEST_HOST is reachable)"
        else
            echo "‚ö†Ô∏è Warning: Cannot access the internet ($TEST_HOST is unreachable)"
        fi
    else
        echo "‚ö†Ô∏è Warning: Gateway $NEW_GW is unreachable"
    fi
else
    echo "‚ö†Ô∏è Warning: No default gateway detected"
fi
echo "----------------------------------------"

echo ""
echo "‚úÖ Network configuration completed!"
echo "üìå To restore original configuration: sudo cp $BACKUP_FILE /etc/network/interfaces && sudo systemctl restart networking"
